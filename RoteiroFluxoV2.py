import streamlit as st
from google import genai # Usando o import original
import google.genai.errors as genai_errors # Usando o import original

# App Streamlit integrado para gerar, analisar, revisar roteiros e metadados de v√≠deos no YouTube

def call_genai(client, model: str, prompt: str) -> str:
    """Chama o Google GenAI para gerar conte√∫do via modelo especificado."""
    try:
        # Esta √© a forma de chamada que estava no seu c√≥digo original
        response = client.models.generate_content(
            model=model, # Passa o nome do modelo aqui
            contents=prompt,
        )
        # Verifica se a resposta tem o atributo 'text' antes de acess√°-lo
        # Alguns modelos/vers√µes da API podem retornar a resposta em response.candidates[0].content.parts[0].text
        # Mas vamos seguir o original que esperava response.text
        if hasattr(response, 'text') and response.text is not None:
            return response.text.strip()
        elif hasattr(response, 'candidates') and response.candidates:
            # Tentativa de fallback para a estrutura mais comum da API Gemini atual
            try:
                return response.candidates[0].content.parts[0].text.strip()
            except (AttributeError, IndexError, TypeError) as e_alt:
                st.warning(f"Resposta n√£o continha 'text' diretamente, nem a estrutura 'candidates[0].content.parts[0].text'. Erro no fallback: {e_alt}")
                st.json(response._result) # Mostra a estrutura da resposta para depura√ß√£o
                raise RuntimeError(f"Formato de resposta inesperado do GenAI. Verifique a estrutura da resposta: {str(response._result)[:500]}")
        else:
            st.warning("Resposta do GenAI n√£o continha o atributo 'text' nem 'candidates' esperados.")
            st.json(response._result) # Mostra a estrutura da resposta para depura√ß√£o
            raise RuntimeError(f"Formato de resposta inesperado do GenAI. Resposta (in√≠cio): {str(response._result)[:500]}")

    except genai_errors.ServerError as e:
        st.error(f"Erro de servidor ao chamar GenAI: {e}")
        raise RuntimeError(f"Erro de servidor ao chamar GenAI: {e}")
    except Exception as e:
        st.error(f"Erro desconhecido ao chamar GenAI: {e}")
        st.error(f"Prompt enviado: {prompt[:300]}...") # Log do in√≠cio do prompt para depura√ß√£o
        # Se a resposta j√° foi obtida e o erro ocorreu ao process√°-la, ela pode n√£o estar dispon√≠vel aqui.
        # Mas se o erro foi na chamada, a 'response' n√£o existir√°.
        raise RuntimeError(f"Erro desconhecido ao chamar GenAI: {e}")

def generate_initial_script(client, model: str, tema: str, objetivo: str, num_palavras: int) -> str:
    """Gera o roteiro inicial com base no tema, objetivo e n√∫mero de palavras."""
    prompt = f"""
1. Tema Central do V√≠deo: {tema}
2. Objetivo Principal/Mensagem Chave (O "Qu√™" e o "Porqu√™"): Qual a √öNICA coisa mais importante que voc√™ quer que o espectador aprenda ou sinta ao final do v√≠deo? Por que isso √© relevante para ele AGORA?: {objetivo}
3. P√∫blico-Alvo (Ideal): Pessoas buscando introdu√ß√£o √† f√© de forma simples, Crist√£os experientes precisando de renova√ß√£o, geralmente homens e mulheres entre 18 a 75 anos.
4. Tom/Estilo Desejado: Conversacional e amig√°vel, Din√¢mico e direto ao ponto.
5. Estrutura do Roteiro (com foco em dinamismo e clareza):
A0: Numero de palavras totais do roteiro: {num_palavras};
A. Gancho Inicial (Primeiros 5-10 segundos OBRIGAT√ìRIOS):
Crie uma pergunta intrigante, uma afirma√ß√£o surpreendente, uma estat√≠stica chocante ou uma mini-hist√≥ria ultra curta (1-2 frases) relacionada ao tema.
Objetivo: Despertar curiosidade IMEDIATA e fazer o espectador pensar "Preciso saber mais sobre isso".
Exemplo para Salom√£o (se fosse come√ßar de novo): "O homem mais s√°bio do mundo... destruiu a pr√≥pria vida. Como? E como voc√™ pode evitar o mesmo erro?"

B. Introdu√ß√£o R√°pida (At√© 30-45 segundos no m√°ximo - 65 a 95 palavras):
Apresente o tema de forma concisa, conectando-o ao gancho.
Promessa de Valor: Diga claramente o que o espectador vai ganhar/aprender/descobrir assistindo ao v√≠deo. "Neste v√≠deo, vamos desvendar..." ou "Voc√™ vai descobrir 3 passos para...".

C. Desenvolvimento do Conte√∫do (Corpo do V√≠deo):
Divida o tema em 2-4 pontos principais NO M√ÅXIMO. Menos √© mais se os pontos forem bem desenvolvidos.
Para cada ponto:
Explica√ß√£o Clara e Concisa: Use frases predominantemente curtas e diretas. Evite par√°grafos muito longos.
Linguagem: Priorize linguagem conversacional e acess√≠vel. Se precisar usar um termo teol√≥gico ou complexo, explique-o de forma simples imediatamente. Pense: "Como eu explicaria isso para um amigo tomando um caf√©?".
Exemplos, Analogias ou Mini-Hist√≥rias: Para cada ponto abstrato, tente trazer um exemplo pr√°tico, uma analogia do dia a dia ou uma breve ilustra√ß√£o para torn√°-lo tang√≠vel e memor√°vel.
Conex√£o com o Espectador: Use "voc√™", "n√≥s". Fa√ßa perguntas ret√≥ricas curtas ("J√° se sentiu assim?", "Faz sentido?").
Pausas Naturais (...): Escreva de forma que as pausas para respira√ß√£o e √™nfase (indicadas por ... ou naturalmente pela pontua√ß√£o como v√≠rgulas e pontos finais) soem org√¢nicas para narra√ß√£o TTS. Quebre ideias complexas em frases menores.

D. Li√ß√µes Pr√°ticas / Aplica√ß√µes / "E Da√≠?" (se aplic√°vel):
Transforme o conhecimento em a√ß√£o. O que o espectador pode FAZER com essa informa√ß√£o?
Apresente de forma clara e acion√°vel. Em vez de longas listas, foque nos 2-3 pontos mais impactantes e pr√°ticos.

E. Conclus√£o e Chamada Para A√ß√£o (CTA):
Recapitula√ß√£o Breve: Em 1-2 frases, reforce a mensagem chave do v√≠deo.
Chamada Para A√ß√£o Clara e Direta:
Pe√ßa o like: "Se este v√≠deo te ajudou de alguma forma, deixe seu like para eu saber!"
Incentive coment√°rios com uma pergunta espec√≠fica: "Qual foi a li√ß√£o que mais te tocou? Comente abaixo!" ou "Voc√™ j√° passou por algo parecido? Compartilhe sua experi√™ncia nos coment√°rios." ou uma frase espec√≠fica: ‚ÄúEu amo Jesus‚Äù ou ‚ÄúEu acredito na Provis√£o‚Äù.
Pe√ßa a inscri√ß√£o: "E se voc√™ quer mais conte√∫do como este, inscreva-se no canal e ative o sininho."
Sugira compartilhar: "Compartilhe este v√≠deo com algu√©m que precisa ouvir essa mensagem."

Encerramento: Uma frase final curta e positiva/encorajadora.

6. Diretrizes Adicionais para Manter o Ritmo e Evitar a Monotonia:
Variedade: Alterne entre explica√ß√£o, exemplo, pergunta, afirma√ß√£o.
Clareza Acima de Tudo: Se uma ideia √© complexa, simplifique-a ou divida-a em partes menores. √â melhor ser claro do que tentar ser exaustivo e perder o espectador.
Relev√¢ncia Constante: Sempre se pergunte: "Por que o meu p√∫blico se importaria com isso?". Conecte o conte√∫do √† vida, dores, desejos e desafios do espectador.
Dura√ß√£o: Mire em uma dura√ß√£o que respeite o tempo do espectador e a densidade do conte√∫do. Para temas complexos, considere dividir em uma miniss√©rie de v√≠deos mais curtos. (Este prompt ajuda a focar, o que naturalmente pode levar a v√≠deos mais concisos).
Lembre-se do TTS: Frases mais curtas e linguagem clara facilitam muito uma boa narra√ß√£o TTS. Evite constru√ß√µes frasais muito rebuscadas ou per√≠odos longu√≠ssimos. N√£o use abreviaturas.
O roteiro deve ser escrito em portugu√™s do Brasil.
O roteiro deve ser formatado para narra√ß√£o, usando "..." para pausas maiores ou entre se√ß√µes.
N√£o inclua marca√ß√µes como "[IN√çCIO DO GANCHO]" ou divis√µes expl√≠citas como "SE√á√ÉO C". O texto deve fluir naturalmente.
O roteiro deve conter alguns trechos b√≠blicos relevantes ao tema e uns 3 ditados populares brasileiros, integrados de forma natural.
Use linguagem acess√≠vel, sem g√≠rias (como "galera"), palavras excessivamente dif√≠ceis ou termos em ingl√™s, a menos que sejam universalmente compreendidos e n√£o tenham um bom equivalente em portugu√™s.
Mantenha o gancho inicial com introdu√ß√£o em, no m√°ximo, 95 palavras. O texto total dever√° ter aproximadamente {num_palavras} palavras.
Evite ser prolixo ou repetitivo. Crie ganchos narrativos sutis entre as partes para manter o interesse.
O resultado final deve ser apenas o texto do roteiro, pronto para ser narrado.
"""
    return call_genai(client, model, prompt)

def revise_script(client, model: str, original_script: str, num_palavras: int) -> str:
    """Revisa o roteiro inicial com base em sugest√µes de melhoria."""
    prompt = f"""
    Voc√™ √© um especialista em cria√ß√£o de conte√∫do viral para YouTube, especializado em narrativas b√≠blicas. Sua miss√£o √© pegar o roteiro fornecido e transform√°-lo em uma obra-prima de engajamento que domina o algoritmo e maximiza reten√ß√£o.

üéØ SUA MISS√ÉO
Reescreva completamente o roteiro fornecido aplicando a estrutura de 15 minutos otimizada, mantendo 100% da fidelidade b√≠blica mas transformando-o em conte√∫do imposs√≠vel de parar de assistir.

üìã ESTRUTURA OBRIGAT√ìRIA PARA APLICAR
üî• SE√á√ÉO 1: HOOK DEVASTADOR (0-20s)
O QUE FAZER:
Crie uma abertura nos primeiros 5 segundos que seja imposs√≠vel de ignorar
Use uma frase de impacto m√°ximo relacionada ao cl√≠max da hist√≥ria
Nos segundos 5-15: contextualize rapidamente + fa√ßa uma promessa irresist√≠vel
Segundos 15-20: d√™ um preview visual do momento mais dram√°tico
FRASE MODELO: "Em [X situa√ß√£o extrema], [personagem b√≠blico] tomou uma decis√£o que [consequ√™ncia chocante]... e o que voc√™ vai descobrir nos pr√≥ximos 15 minutos vai mudar completamente sua perspectiva sobre [tema central]."

üé≠ SE√á√ÉO 2: ESTABELECIMENTO + PRIMEIRA REVELA√á√ÉO (20s-2min)
O QUE FAZER:
20-45s: Forne√ßa contexto b√≠blico essencial de forma din√¢mica
45s-1:30min: Revele uma primeira informa√ß√£o surpreendente que poucos conhecem
1:30-2min: Crie um gancho que for√ßa o espectador a continuar
ELEMENTOS OBRIGAT√ìRIOS:
Uma pergunta direta ao p√∫blico que os fa√ßa pensar
Uma "curiosity gap" que s√≥ ser√° fechada mais tarde
Conex√£o com algo que o espectador j√° viveu

‚ö° SE√á√ÉO 3: DESENVOLVIMENTO DO CONFLITO (2-5min)
O QUE FAZER:
2-3min: Aprofunde o drama humano por tr√°s da hist√≥ria b√≠blica
3-4min: Primeira aplica√ß√£o pessoal forte ("Se voc√™ j√° se sentiu...")
4-5min: Construa tens√£o crescente + teaser do que vem
ELEMENTOS OBRIGAT√ìRIOS:
Pelo menos 2 ganchos de reten√ß√£o ("Mas isso n√£o √© nada comparado ao que...")
Uma pergunta que fa√ßa as pessoas pausarem para comentar
Conex√£o emocional que fa√ßa o espectador se identificar

üí• SE√á√ÉO 4: PRIMEIRA GRANDE REVELA√á√ÉO (5-8min)
O QUE FAZER:
5-6min: Entregue o primeiro cl√≠max emocional da hist√≥ria
6-7min: Explore as consequ√™ncias e extraia li√ß√µes profundas
7-8min: Fa√ßa transi√ß√£o suave + lance novo gancho irresist√≠vel
ELEMENTOS OBRIGAT√ìRIOS:
Um momento "uau" que justifique ter assistido at√© aqui
Aplica√ß√£o pr√°tica que mude a perspectiva do espectador
Pattern interrupt que quebre expectativas

üîÑ SE√á√ÉO 5: SEGUNDO ARCO NARRATIVO (8-11min)
O QUE FAZER:
8-9min: Introduza nova perspectiva ou personagem secund√°rio
9-10min: Desenvolva conex√£o paralela com a hist√≥ria principal
10-11min: Una todos os fios narrativos de forma surpreendente
ELEMENTOS OBRIGAT√ìRIOS:
Revela√ß√£o que recontextualiza tudo que foi dito antes
Pelo menos uma pergunta que gere debate nos coment√°rios
Momento de identifica√ß√£o pessoal ("Quantos de n√≥s...")

üéÜ SE√á√ÉO 6: CL√çMAX PRINCIPAL (11-13min)
O QUE FAZER:
11-12min: Entregue o momento de maior tens√£o/emo√ß√£o de toda a hist√≥ria
12-13min: Resolva de forma √©pica + revele a li√ß√£o transformadora final
ELEMENTOS OBRIGAT√ìRIOS:
O payoff de todas as "curiosity gaps" abertas
Momento emocional que pode gerar l√°grimas
Revela√ß√£o que conecta tudo de forma genial

üéØ SE√á√ÉO 7: RESOLU√á√ÉO + APLICA√á√ÉO (13-15min)
O QUE FAZER:
13-14min: Aplica√ß√£o pr√°tica e moderna da li√ß√£o b√≠blica
14-14:45min: Call-to-action principal (like, coment√°rio, inscri√ß√£o)
14:45-15min: Teaser irresist√≠vel do pr√≥ximo v√≠deo
ELEMENTOS OBRIGAT√ìRIOS:
Pergunta final que force intera√ß√£o nos coment√°rios
Desafio pr√°tico que o espectador pode aplicar hoje
Gancho para o pr√≥ximo v√≠deo que crie expectativa

‚ö° GANCHOS DE RETEN√á√ÉO OBRIGAT√ìRIOS
Distribua estas frases (ou similares) ao longo do roteiro:
Minuto 1: "Mas o que voc√™ vai descobrir vai chocar voc√™..."
Minuto 3: "Voc√™ n√£o vai acreditar no que aconteceu depois..."
Minuto 5: "E foi a√≠ que a verdade devastadora veio √† tona..."
Minuto 7: "Mas espere, porque tem muito mais..."
Minuto 9: "Isso vai mudar completamente sua perspectiva sobre..."
Minuto 11: "Aqui est√° o momento que mudou tudo..."
Minuto 13: "E a li√ß√£o que vai transformar sua vida √©..."

üé≠ T√âCNICAS OBRIGAT√ìRIAS PARA APLICAR
CURIOSITY GAPS (Lacunas de Curiosidade)
Crie pelo menos 5 momentos onde voc√™:
Menciona algo intrigante
Diz "vou explicar isso em alguns minutos"
S√≥ resolve a curiosidade mais tarde
PATTERN INTERRUPTS (Quebra de Padr√£o)
Mude o tom de voz drasticamente 3-4 vezes
Use perguntas diretas inesperadas
Revele informa√ß√µes que contrariam expectativas
SOCIAL PROOF (Prova Social)
"Milhares de pessoas j√° me perguntaram sobre isso..."
"Nos coment√°rios do √∫ltimo v√≠d–µ–æ, voc√™s disseram..."
"Se voc√™ √© como a maioria das pessoas..."
APLICA√á√ÉO PESSOAL CONSTANTE
A cada 2-3 minutos, conecte com a vida real:
"Se voc√™ j√° passou por isso..."
"Quantas vezes voc√™ se sentiu assim..."
"Essa situa√ß√£o te lembra alguma coisa?"

üìä ELEMENTOS DE ENGAJAMENTO OBRIGAT√ìRIOS
PERGUNTAS ESTRAT√âGICAS (M√≠nimo 8)
Distribua perguntas que:
Fa√ßam as pessoas pausarem para pensar
Gerem debate nos coment√°rios
Criem identifica√ß√£o pessoal
CALL-TO-ACTIONS INTEGRADOS (M√≠nimo 4)
Minuto 7: "Me conta nos coment√°rios se..."
Minuto 10: "Deixa um like se voc√™ concorda que..."
Minuto 12: "Compartilha se isso tocou seu cora√ß√£o..."
Minuto 14: "Inscreve-se e ativa o sininho porque..."
MOMENTOS DE PAUSA (M√≠nimo 3)
Crie momentos onde √© natural pausar:
Para refletir sobre uma revela√ß√£o
Para processar uma emo√ß√£o intensa
Para comentar uma aplica√ß√£o pessoal

‚úÖ CHECKLIST FINAL PARA VALIDA√á√ÉO
Antes de entregar, verifique se o roteiro tem:
ESTRUTURA:
[ ] Hook devastador nos primeiros 10 segundos
[ ] 7 ganchos de reten√ß√£o distribu√≠dos nos minutos certos
[ ] 3 grandes arcos narrativos conectados
[ ] Pausas naturais nos minutos 3, 6, 9 e 12 para ads
ENGAJAMENTO:
[ ] 8+ perguntas que geram coment√°rios
[ ] 5+ curiosity gaps bem constru√≠dos
[ ] 4+ call-to-actions integrados naturalmente
[ ] 3+ momentos de aplica√ß√£o pessoal forte
RETEN√á√ÉO:
[ ] Preview do cl√≠max logo no in√≠cio
[ ] Teasers constantes do que vem
[ ] Pattern interrupts bem distribu√≠dos
[ ] Final que recompensa toda a jornada
T√âCNICO:
[ ] Varia√ß√£o de ritmo claro
[ ] Transi√ß√µes suaves
[ ] Fidelidade b√≠blica 100% mantida

üéØ PROMPT DE EXECU√á√ÉO
"Agora pegue o roteiro fornecido e reescreva-o completamente seguindo esta estrutura. O texto deve estar pronto para a narra√ß√£o, sem marca√ß√µes ou indica√ß√µes que n√£o ser√£o narrados. Mantenha a ess√™ncia e verdade b√≠blica, mas transforme-o em um v√≠deo viral que domina o algoritmo do YouTube. Inclua todos os ganchos de reten√ß√£o e t√©cnicas de engajamento. Fa√ßa cada minuto valer a perman√™ncia do espectador."
"Roteiro original a ser analisado e reescrito:\n"
+ {original_script}
"""
    return call_genai(client, model, prompt)

def generate_titles_and_description(client, model: str, script: str) -> str:
    """Gera t√≠tulos, descri√ß√£o, hashtags, tags e prompt de thumbnail para o YouTube."""
    prompt = (
        "Com base no roteiro de v√≠deo fornecido:\n\n"
        "1.  **T√≠tulos (Ranking):** Crie 5 sugest√µes de t√≠tulo para v√≠deo de YouTube, cada um com no m√°ximo 60 caracteres. Os t√≠tulos devem despertar curiosidade, prometer um benef√≠cio claro e/ou criar um senso de urg√™ncia. Eles devem seguir as melhores pr√°ticas para t√≠tulos chamativos e bem-sucedidos no YouTube, visando aumentar os cliques sem se afastar do conte√∫do do v√≠deo. Apresente os t√≠tulos em um ranking, do melhor para o menos preferido, com uma breve justificativa para o t√≠tulo principal.\n\n"
        "2.  **Descri√ß√£o do V√≠deo:** Elabore uma descri√ß√£o otimizada para SEO com aproximadamente 1800 caracteres. A descri√ß√£o deve:\n"
        "    *   Come√ßar com 1-2 frases que expandam o t√≠tulo e o gancho do v√≠deo, incluindo palavras-chave principais.\n"
        "    *   Resumir os pontos chave e benef√≠cios do v√≠deo.\n"
        "    *   Incluir chamadas para a√ß√£o (inscrever-se, assistir outros v√≠deos, links relevantes se houver).\n"
        "    *   Conter um bloco de hashtags relevantes (ex: #f√© #b√≠blia #mensagemdodia).\n\n"
        "3.  **Tags:** Liste de 10 a 15 tags relevantes para o v√≠deo, separadas por v√≠rgulas.\n\n"
        "4.  **Prompt para Thumbnail (Portugu√™s e Ingl√™s):** Sugira um prompt detalhado para a cria√ß√£o da imagem da thumbnail usando IA (ex: Midjourney, DALL-E). O prompt deve considerar:\n"
        "    *   **3 Elementos Visuais Principais:** Um rosto humano com express√£o forte e vis√≠vel (localizado preferencialmente √† direita da imagem), uma cena de fundo ou elemento que remeta ao tema do v√≠deo, e um terceiro elemento que chame a aten√ß√£o, crie curiosidade ou interaja emocionalmente com o personagem/tema.\n"
        "    *   **Estilo Visual:** Chamativo, cores vibrantes (ou paleta espec√≠fica se relevante ao tema), boa ilumina√ß√£o no rosto.\n"
        "    *   **Composi√ß√£o:** Foco no rosto, evitando texto overlay na imagem (o t√≠tulo do v√≠deo j√° cumpre essa fun√ß√£o).\n"
        "    *   **Objetivo:** Despertar curiosidade e impacto emocional.\n"
        "    Forne√ßa o prompt em Portugu√™s e sua tradu√ß√£o para o Ingl√™s.\n\n"
        "--- ROTEIRO DO V√çDEO PARA AN√ÅLISE ---\n"
        + script
    )
    return call_genai(client, model, prompt)


def main():
    st.set_page_config(page_title="Roteiro YouTube AI", page_icon="üìú", layout="wide")
    st.title("Gerador de Roteiro e Metadados para YouTube")
    st.markdown("Crie roteiros iniciais, metadados e revise-os com IA para seus v√≠deos do YouTube.")

    # Sidebar para configura√ß√£o do modelo (CONFORME SOLICITADO)
    st.sidebar.header("Configura√ß√µes do Modelo")
    # Nota: "gemini-2.5-flash-preview-04-17" pode ser um nome de modelo espec√≠fico ou de uma API mais antiga.
    # Para a API Gemini mais recente (google-generativeai), os nomes s√£o como "models/gemini-1.5-flash-latest".
    # Certifique-se de que este nome de modelo √© compat√≠vel com a forma como genai.Client() e client.models.generate_content() s√£o usados.
    default_model = st.secrets.get("default_model", "gemini-2.5-flash-preview-04-17") # Alterado para um modelo mais comum, mas mantenha o seu se funcionar
    model_name = st.sidebar.text_input("Modelo GenAI", value=default_model, help="Ex: gemini-1.5-flash-latest, gemini-1.5-pro-latest. Alguns modelos mais antigos podem n√£o usar o prefixo 'models/'.")

    # Inicializa cliente GenAI (CONFORME SOLICITADO)
    api_key = st.secrets.get("google_api_key", "")

    if not api_key:
        st.sidebar.error("Chave API do Google (google_api_key) n√£o encontrada nos secrets.")
        st.error("Por favor, configure a chave API do Google nos secrets do Streamlit para continuar.")
        st.stop()

    client = None # Inicializa client como None
    try:
        # A forma como 'genai.Client(api_key=api_key)' √© usada sugere uma biblioteca
        # como 'google-ai-generativelanguage' ou uma vers√£o mais antiga de 'google-generativeai'.
        # Se estiver usando 'google-generativeai' >= 0.3.0, a inicializa√ß√£o seria:
        # genai.configure(api_key=api_key)
        # E para chamadas: model_instance = genai.GenerativeModel(model_name)
        # response = model_instance.generate_content(...)
        # No entanto, vamos seguir o padr√£o do c√≥digo original fornecido:
        client = genai.Client(api_key=api_key)
    except Exception as e:
        st.error(f"Erro ao inicializar o cliente GenAI: {e}")
        st.sidebar.error(f"Erro ao inicializar cliente GenAI: {e}")
        st.stop()

    if client is None: # Verifica√ß√£o adicional
        st.error("Falha cr√≠tica: Cliente GenAI n√£o foi inicializado.")
        st.stop()

    st.header("1. Defina o Conte√∫do do Roteiro")
    tema = st.text_input("Tema B√≠blico Espec√≠fico:", placeholder="Ex: A hist√≥ria de Davi e Golias e suas li√ß√µes de coragem")
    objetivo = st.text_input(
        "Objetivo Principal/Mensagem Chave (O Qu√™ e o Porqu√™):",
        value="Que podemos aprender com as li√ß√µes dos outros ou Que Deus sempre perdoa e podemos recome√ßar (relevante pois todos erram)",
        placeholder="Ex: Inspirar f√© atrav√©s da perseveran√ßa de J√≥"
    )
    num_palavras = st.number_input(
        "N√∫mero aproximado de palavras para o roteiro:",
        min_value=200, max_value=10000, value=1000, step=100,
        help="Um roteiro de 1000 palavras tem aproximadamente 7-8 minutos de narra√ß√£o."
    )

    if "roteiro_inicial" not in st.session_state:
        st.session_state.roteiro_inicial = ""
    if "meta" not in st.session_state:
        st.session_state.meta = ""
    if "roteiro_revisado" not in st.session_state:
        st.session_state.roteiro_revisado = ""

    col1, col2 = st.columns(2)

    with col1:
        if st.button("üìù Gerar Roteiro Inicial e Metadados", type="primary", use_container_width=True):
            if not tema.strip():
                st.error("Por favor, preencha o tema b√≠blico.")
            elif not objetivo.strip():
                st.error("Por favor, preencha o objetivo principal.")
            else:
                try:
                    with st.spinner("Gerando roteiro inicial... Por favor, aguarde."):
                        st.session_state.roteiro_inicial = generate_initial_script(client, model_name, tema, objetivo, num_palavras)
                    st.success("Roteiro inicial gerado!")

                    with st.spinner("Gerando t√≠tulos, descri√ß√£o e prompt de thumbnail..."):
                        palavras_roteiro = st.session_state.roteiro_inicial.split()
                        roteiro_curto_para_meta = " ".join(palavras_roteiro[:1500])
                        st.session_state.meta = generate_titles_and_description(client, model_name, roteiro_curto_para_meta)
                    st.success("Metadados gerados!")
                    st.session_state.roteiro_revisado = ""

                except RuntimeError as e:
                    st.error(f"Ocorreu um erro: {e}")
                except Exception as e:
                    st.error(f"Ocorreu um erro inesperado: {e}")
    with col2:
        if st.session_state.roteiro_inicial:
            if st.button("üîÑ Revisar Roteiro Inicial", use_container_width=True):
                if not st.session_state.roteiro_inicial.strip():
                    st.warning("Gere um roteiro inicial primeiro para poder revis√°-lo.")
                else:
                    try:
                        with st.spinner("Revisando roteiro... Por favor, aguarde."):
                            st.session_state.roteiro_revisado = revise_script(client, model_name, st.session_state.roteiro_inicial, num_palavras)
                        st.success("Roteiro revisado com sucesso!")
                    except RuntimeError as e:
                        st.error(f"Ocorreu um erro durante a revis√£o: {e}")
                    except Exception as e:
                        st.error(f"Ocorreu um erro inesperado durante a revis√£o: {e}")

    st.markdown("---")
    st.header("Resultados Gerados")

    tab_inicial, tab_meta, tab_revisado = st.tabs(["üìú Roteiro Inicial", "üìä Metadados", "‚úçÔ∏è Roteiro Revisado"])

    with tab_inicial:
        if st.session_state.roteiro_inicial:
            st.subheader("Roteiro Inicial Gerado")
            st.text_area("Roteiro Inicial:", st.session_state.roteiro_inicial, height=400, key="text_area_inicial")
            st.download_button(
                label="üì• Baixar Roteiro Inicial",
                data=st.session_state.roteiro_inicial,
                file_name=f"roteiro_inicial_{tema[:20].replace(' ','_') if tema else 'sem_tema'}.txt",
                mime="text/plain"
            )
        else:
            st.info("Clique em 'Gerar Roteiro Inicial e Metadados' para come√ßar.")

    with tab_meta:
        if st.session_state.meta:
            st.subheader("T√≠tulos, Descri√ß√£o e Prompt de Thumbnail")
            st.text_area("Metadados:", st.session_state.meta, height=400, key="text_area_meta")
            st.download_button(
                label="üì• Baixar Metadados",
                data=st.session_state.meta,
                file_name=f"metadados_{tema[:20].replace(' ','_') if tema else 'sem_tema'}.txt",
                mime="text/plain"
            )
        else:
            st.info("Metadados ser√£o gerados junto com o roteiro inicial.")

    with tab_revisado:
        if st.session_state.roteiro_revisado:
            st.subheader("Roteiro Revisado")
            st.text_area("Roteiro Revisado:", st.session_state.roteiro_revisado, height=400, key="text_area_revisado")
            st.download_button(
                label="üì• Baixar Roteiro Revisado",
                data=st.session_state.roteiro_revisado,
                file_name=f"roteiro_revisado_{tema[:20].replace(' ','_') if tema else 'sem_tema'}.txt",
                mime="text/plain"
            )
        elif st.session_state.roteiro_inicial:
            st.info("Clique em 'Revisar Roteiro Inicial' se desejar uma vers√£o aprimorada.")
        else:
            st.info("Gere um roteiro inicial primeiro. A op√ß√£o de revis√£o aparecer√° em seguida.")


if __name__ == "__main__":
    main()


