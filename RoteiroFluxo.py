import streamlit as st
from google import genai
import google.genai.errors as genai_errors

# App Streamlit integrado para gerar, analisar, revisar roteiros e metadados de v√≠deos no YouTube

def call_genai(client, model: str, prompt: str) -> str:
    """Chama o Google GenAI para gerar conte√∫do via modelo especificado."""
    try:
        response = client.models.generate_content(
            model=model,
            contents=prompt,
        )
        return response.text.strip()
    except genai_errors.ServerError as e:
        raise RuntimeError(f"Erro de servidor ao chamar GenAI: {e}")
    except Exception as e:
        raise RuntimeError(f"Erro desconhecido ao chamar GenAI: {e}")


def analyze_script(client, model: str, script: str) -> str:
    prompt = (
        "Analise este roteiro considerando o gancho inicial, reten√ß√£o, engajamento e storytelling. Traga sugest√µes de melhoria de forma destacada.\n"
        + script
    )
    return call_genai(client, model, prompt)


def generate_script(client, model: str, original: str, analysis: str, num_palavras: int) -> str:
    """Reescreve o roteiro original com base na an√°lise, usando o n√∫mero de palavras especificado."""
    prompt = (
        f"Voc√™ √© um roteirista de v√≠deos de youtube, especialista em reten√ß√£o e storytelling. "
        f"Reescreva o texto, com aproximadamente {num_palavras} palavras, de tal forma que n√£o incorra em pl√°gio ou conte√∫do reutiliz√°vel, pronto para a narra√ß√£o via tts (nas pausas maiores ou entre as partes use ...), "
        f"sem [] ou divis√µes, ou marca√ß√µes, contendo trechos b√≠blicos, e uns 3 ditados populares. "
        "Use linguagem acess√≠vel e sem abreviaturas (n√£o use express√£o como galera, palavras dif√≠ceis ou em ingl√™s). Abra ganchos narrativos entre as partes. N√£o seja prolixo. "
        "Aten√ß√£o: o gancho inicial com introdu√ß√£o deve ter no m√°ximo 25 segundos ou 55 palavras.\n"
        "Mantenha os pontos fortes e fa√ßa as melhorias sugeridas de acordo com o texto e an√°lise a seguir.\n\n"
        "Roteiro original:\n" + original + "\n\n"
        "An√°lise:\n" + analysis
    )
    return call_genai(client, model, prompt)


def generate_titles_and_description(client, model: str, script: str) -> str:
    prompt = (
        "Crie sugest√µes de t√≠tulo para v√≠deo de youtube com no m√°ximo 60 caracteres. "
        "Os t√≠tulos devem despertar curiosidade, benef√≠cio e urg√™ncia e atender √†s melhores pr√°ticas de t√≠tulos chamativos e bem sucedidos de youtube, "
        "a fim de aumentar os cliques sem se afastar do conte√∫do do v√≠deo. Fa√ßa um ranking entre eles. "
        "Ao final traga a descri√ß√£o do v√≠deo de youtube com 1800 caracteres, hashtags e tags entre v√≠rgulas, atentando para SEO, "
        "e sugest√£o de prompt em portugu√™s e em ingl√™s para a cria√ß√£o de imagem da thumb, "
        "considerando 3 elementos visuais principais na thumb (Um rosto, uma cena e algo que chame a aten√ß√£o e interaja emocionalmente com o personagem), "
        "rosto vis√≠vel com express√£o forte, localizado √† direita da imagem, com visual chamativo e que desperte a curiosidade, sem texto overlay.\n\n"
        + script
    )
    return call_genai(client, model, prompt)


def main():
    # Configura√ß√£o da p√°gina
    st.set_page_config(page_title="Roteiro YouTube AI", page_icon="üìú", layout="wide")
    st.title("Gerador Completo de Roteiro e Metadados para YouTube")
    st.markdown("Este aplicativo gera um roteiro completo, analisa, revisa e cria metadados (t√≠tulos, descri√ß√£o e prompt de thumb) baseado em um tema e tamanho de roteiro.")

    # Sidebar para configura√ß√£o do modelo
    st.sidebar.header("Configura√ß√µes do Modelo")
    default_model = st.secrets.get("default_model", "gemini-2.5-flash-preview-04-17")
    model_name = st.sidebar.text_input("Modelo GenAI", value=default_model)

    # Inicializa cliente GenAI
    api_key = st.secrets.get("google_api_key", "")
    client = genai.Client(api_key=api_key)

    # Inputs principais
    tema = st.text_input("Tema B√≠blico Espec√≠fico:", "")
    num_palavras = st.number_input(
        "N√∫mero aproximado de palavras para o roteiro inicial:",
        min_value=100, max_value=10000, value=1000, step=50
    )

    # Bot√£o para gerar todo o pipeline
    if st.button("Gerar Conte√∫do Completo"):
        if not tema.strip():
            st.error("Por favor, preencha o tema b√≠blico.")
        else:
            try:
                # 1. Gerar roteiro inicial
                with st.spinner("Gerando roteiro inicial..."):
                    prompt_script = (
                        f"Crie um roteiro para um v√≠deo do YouTube com aproximadamente {num_palavras} palavras, focado no p√∫blico crist√£o, sobre o tema b√≠blico: \"{tema}\".\n\n"
                        + "**I. INTRODU√á√ÉO E GANCHO (Aproximadamente 10-15% do roteiro):**\n\n"
                        + "1.  **Gancho Forte e Variado:**\n"
                        + "    *   Comece com uma pergunta ret√≥rica impactante, uma breve e v√≠vida vinheta/hist√≥ria hipot√©tica que o espectador possa se identificar, uma cita√ß√£o b√≠blica poderosa e menos conhecida, ou uma estat√≠stica surpreendente (se aplic√°vel e verdadeira) relacionada ao tema.\n"
                        + "    *   **Exemplo de Varia√ß√£o:** \"[Comece com uma imagem mental forte: 'Imagine [personagem b√≠blico/situa√ß√£o] enfrentando [desafio relacionado ao tema]... Essa luta antiga ecoa em nossos cora√ß√µes hoje quando lidamos com [aspecto moderno do tema]...']\"\n\n"
                        + "2.  **Conex√£o Imediata:** Relacione o gancho diretamente √†s dores, d√∫vidas, anseios ou curiosidades do p√∫blico sobre o [TEMA B√çBLICO ESPEC√çFICO].\n\n"
                        + "3.  **Promessa de Valor Clara:**\n"
                        + "    *   Declare explicitamente o que o espectador vai aprender ou descobrir (ex: \"Nos pr√≥ximos minutos, voc√™ vai descobrir [N√öMERO] chaves/sinais/principais sobre [TEMA B√çBLICO ESPEC√çFICO]\"...)"
                        # Truncated: manter conforme roteirotema.py
                    )
                    roteiro_inicial = call_genai(client, model_name, prompt_script)
                    st.session_state.roteiro = roteiro_inicial

                # 2. Analisar roteiro
                with st.spinner("Analisando roteiro..."):
                    analysis = analyze_script(client, model_name, roteiro_inicial)
                    st.session_state.analysis = analysis

                # 3. Revisar roteiro (gerar novo roteiro)
                with st.spinner("Revisando e gerando novo roteiro..."):
                    roteiro_final = generate_script(client, model_name, roteiro_inicial, analysis, num_palavras)
                    st.session_state.revised = roteiro_final

                # 4. Gerar t√≠tulos, descri√ß√£o e prompt de thumb (usando apenas as 2000 primeiras palavras)
                with st.spinner("Gerando t√≠tulos, descri√ß√£o e prompt de thumbnail..."):
                    palavras = st.session_state.revised.split()
                    roteiro_truncado = " ".join(palavras[:2000])
                    meta = generate_titles_and_description(client, model_name, roteiro_truncado)
                    st.session_state.meta = meta

                # 5. Reescrever gancho inicial
                with st.spinner("Gerando gancho inicial revisado..."):
                    palavras_g = st.session_state.revised.split()
                    trecho_gancho = " ".join(palavras_g[:250])
                    prompt_gancho = (
                        "Voc√™ √© especialista em cria√ß√£o de gancho inicial para v√≠deos, que desperta curiosidade e reten√ß√£o, "
                        "melhore este gancho e introdu√ß√£o inicial que dever√° ter apenas 90 palavras.\n\n" + trecho_gancho
                    )
                    gancho_revisado = call_genai(client, model_name, prompt_gancho)
                    st.session_state.gancho = gancho_revisado

            except RuntimeError as e:
                st.error(f"Ocorreu um erro durante o pipeline: {e}")

    # Exibir resultado final
    if st.session_state.get("gancho"):
        st.subheader("Gancho Inicial Revisado")
        st.text_area("", st.session_state.gancho, height=100)
        st.download_button(
            label="üì• Baixar Gancho Revisado",
            data=st.session_state.gancho,
            file_name="gancho_revisado.txt",
            mime="text/plain"
        )
    if st.session_state.get("revised"):
        st.subheader("Roteiro Final")
        st.text_area("", st.session_state.revised, height=300)
        st.download_button(
            label="üì• Baixar Roteiro Final",
            data=st.session_state.revised,
            file_name="roteiro_final.txt",
            mime="text/plain"
        )
    if st.session_state.get("meta"):
        st.subheader("T√≠tulos, Descri√ß√£o e Prompt de Thumbnail")
        st.text_area("", st.session_state.meta, height=300)
        st.download_button(
            label="üì• Baixar Metadados (T√≠tulo, Descri√ß√£o e Prompt)",
            data=st.session_state.meta,
            file_name="metadados.txt",
            mime="text/plain"
        )


if __name__ == "__main__":
    main()
